openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Delilah Resto'
  description: 'Gesti칩n y administraci칩n de pedidos online'
  contact:
    name: Martin Ludue침a
    email: hectormartinluduena@gmail.com
servers: 
  - url: https://dev.delilahresto.com/v1
    description: Dev Server
    
  - url: https://prod.delilahresto.com/v1
    description: Prod Server
tags: 
- name: Usuarios
  description: Operaciones con endpoints usuarios
- name: Productos
  description: Gestion de productos
- name: Pedidos
  description: Gestion de pedidos
paths: 
  /usuarios:
    post:
      tags: 
        - Usuarios
      summary: Registrar un nuevo usuario
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
        required: true
      responses:
        200: 
          description: Usuario creado exitosamente
        400:
          description: Error al ingresar los datos
        500: 
          description: Error de servidor
    get:
      tags: 
        - Usuarios
      summary: Obtenter el listado de usuarios
      security: 
        - middelware_autorizacion: []
      responses:
        200:
          description: Operacion exitosa
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Usuario'
        401: 
          description: Usuario no autorizado
        500:
          description: Error del servidor
  /usuarios/{id_usuario}:
    get:
      tags: 
        - Usuarios
      summary: Obtener un usuario por su id
      security: 
        - middelware_autorizacion: []
      parameters: 
        - $ref: '#/components/parameters/id_usuario'
      responses:
        200:
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        401: 
          description: Usuario no autorizado
        404: 
          description: Usuario inexistente
        500:
          description: Error del servidor
    put:
      tags: 
        - Usuarios
      summary: Actualizar los datos de un usuario
      security: 
        - autenticacion: []
      description: Usuario logueado solo puede modificar los datos de su cuenta
      parameters: 
        - $ref: '#/components/parameters/id_usuario'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        200:
          description: Usuario actualizado con exito
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Usuario'
        401: 
          description: Usuario no autorizado
        404:
          description: Usuario inexistente
        500:
          description: Error del servidor
    delete:
      tags: 
        - Usuarios
      summary: Eliminar un usuario
      security: 
        - middelware_autorizacion: []
      parameters: 
        - $ref: '#/components/parameters/id_usuario'
      responses:
        204:
          description: Usuario eliminado con exito
        401: 
          description: Usuario no autorizado
        404:
          description: Usuario inexistente
        500:
          description: Error del servidor
  /usuarios/login:
    post:
      tags: 
        - Usuarios
      summary: logear un usuario 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - email
                - contrasena
              properties:
                email:
                  type: string
                  example: "hector234@gmail.com"
                contrasena:
                  type: string
                  example: "3838jskfs"
      responses:
        200:
          description: Usuario logueado correctamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9. TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
        401:
          description: email o contrase침a incorrectos
        500:
          description: Error del servidor
  /productos:
    post:
      tags: 
        - Productos
      summary: Agregar un producto
      security: 
        - middelware_autorizacion: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producto'
      responses:
        200: 
          description: Producto creado exitosamente
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/Producto'
        401:
          description: Usuario no autorizado
        500: 
          description: Error de servidor
    get:
      tags: 
        - Productos
      summary: Obtenter el listado de productos
      security: 
        - autenticacion: []
      responses:
        200:
          description: Operacion exitosa
          content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Producto'
        500:
          description: Error del servidor
  /productos/{id_producto}:
    get:
      tags:
        - Productos
      summary: Obtenter producto por su id
      security: 
        - autenticacion: []
      parameters:
        - $ref: '#/components/parameters/id_producto'
      responses:
        200:
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Producto'
        404: 
          description: Producto inexistente
        500:
          description: Error del servidor
    put:
      tags: 
        - Productos
      summary: Actualizar los datos de un producto
      security: 
        - middelware_autorizacion: []
      parameters: 
        - $ref: '#/components/parameters/id_producto'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Producto'
      responses:
        200:
          description: Producto actualizado con exito
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Producto'
        401: 
          description: Usuario no autorizado
        404:
          description: Producto inexistente
        500:
          description: Error del servidor
    delete:
      tags: 
        - Productos
      summary: Eliminar un producto
      security: 
        - middelware_autorizacion: []
      parameters: 
        - $ref: '#/components/parameters/id_producto'
      responses:
        204:
          description: Producto eliminado con exito
        401: 
          description: Usuario no autorizado
        404:
          description: Producto inexistente
        500:
          description: Error del servidor
  /pedidos:
    post:
      tags: 
        - Pedidos
      summary: Crear un pedido
      security: 
        - autenticacion: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/realizarPedido'
        required: true
      responses:
        200: 
          description: Pedido creado exitosamente
          content:
            aplication/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        400:
          description: Error al ingresar los datos
        500: 
          description: Error de servidor
    get:
      tags: 
        - Pedidos
      summary: Obtener todos los pedidos realizados
      security: 
        - middelware_autorizacion: []
      responses:
        200: 
          description: Operacion exitosa
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pedido'
        401: 
          description: Usuario no autorizado
        500: 
          description: Error de servidor
  /pedidos/{id_pedido}:
    get:
      tags: 
        - Pedidos
      summary: Obtener pedido con su id
      security: 
        - autenticacion: []
      parameters: 
        - $ref: '#/components/parameters/id_pedido'
      responses:
        200:
          description: Operacion exitosa
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pedido'
        404: 
          description: Pedido inexistente
        500:
          description: Error del servidor
    put:
      tags: 
        - Pedidos
      summary: Actualizar los datos de un pedido
      security: 
        - middelware_autorizacion: []
      parameters: 
        - $ref: '#/components/parameters/id_pedido'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/actualizarPedido'
      responses:
        200:
          description: Producto actualizado con exito
          content:
            application/json:
              schema:
                 $ref: '#/components/schemas/Pedido'
        401: 
          description: Usuario no autorizado
        404:
          description: Producto inexistente
        500:
          description: Error del servidor
    delete:
      tags: 
        - Pedidos
      summary: Eliminar un pedido
      security: 
        - middelware_autorizacion: []
      parameters: 
        - $ref: '#/components/parameters/id_pedido'
      responses:
        204:
          description: Pedido eliminado con exito
        401: 
          description: Usuario no autorizado
        404:
          description: Pedido inexistente
        500:
          description: Error del servidor
components:
  schemas:
    Usuario:
      type: object
      required:
        - usuario
        - nombreApellido
        - email
        - direccion
        - telefono
        - contrasena
      properties:
        id_usuario:
          type: integer
          format: int64
          readOnly: true
          example: 2
        usuario:
          type: string
          example: "Hector_234"
        nombreApellido:
          type: string
          example: "Hector Martin"
        email:
          type: string
          example: "hector234@gmail.com"
        direccion:
          type: string
          example: "Av. Fuentes 453"
        telefono:
          type: integer
          description: Ingresar n칰mero sin el cero y sin el quince
          minimum: 10
          maximum: 10
          example: 1126123643
        contrasena:
          type: string
          writeOnly: true
          example: "Leia0502PaSS"
        id_pedidos:
          type: array
          readOnly: true
          items: 
            type: integer
            example: 14
            readOnly: true
        es_admin:
          type: boolean
          description: TRUE si el usuario es admin y FALSE si el usuario no es admin
          readOnly: true
          default: "FALSE"
          example: "FALSE"
    Producto:
      type: object
      required: 
        - nombre
        - img
        - precio
      properties:
        id_producto:
          type: integer
          format: int64
          readOnly: true
          example: 5
        nombre:
          type: string
          example: "Hamburguesa con queso"
        img: 
          type: string
          example: "https://d1uz88p17r663j.cloudfront.net/original/8689e8d974203563ddcc9bbff91323c2_MG_CHORIZOBURGER_Main-880x660.png"
        precio:
          type: integer
          example: 95
    Pedido:
      type: object
      properties:
        id_pedido:
          type: integer
          format: int64
          readOnly: true
          example: 7
        estado: 
          type: string
          enum:
            - nuevo
            - confirmado
            - preparando
            - enviando
            - entregado 
            - cancelado
          example: "nuevo"
        date: 
          type: string
          format: date-time
          example: "2019-09-15 15:23:34"
          readOnly: true
        formaDePago:
          type: string
          enum:
            - credito
            - efectivo
          example: "efectivo"
        total: 
          type: integer
          example: 450
        id_usuario:
          type: integer
          example: 3
        productos:
          type: array
          items:
            type: object
            properties:
              id_producto:
                type: integer
                format: int64
                readOnly: true
                example: 5
              nombre:
                type: string
                example: "Hamburguesa con queso"
              img: 
                type: string
                example: "https://d1uz88p17r663j.cloudfront.net/original/8689e8d974203563ddcc9bbff91323c2_MG_CHORIZOBURGER_Main-880x660.png"
              precio:
                type: integer
                example: 95
              cantidad:
                type: integer
                example: 7
    realizarPedido:
      type: object
      properties:
        formaDePago:
              type: string
              enum:
                - credito
                - efectivo
        productos:
          type: array
          items:
           type: object
           properties:
            id_producto:
              type: integer
              example: 7
            cantidad: 
              type: integer
              example: 6
    actualizarPedido:
      type: object
      properties:
        estado: 
          type: string
          enum:
            - nuevo
            - confirmado
            - preparando
            - enviando
            - entregado 
            - cancelado
          example: "nuevo"
        formaDePago:
          type: string
          enum:
            - credito
            - efectivo
          example: "efectivo"
        id_usuario:
          type: integer
          example: 3
        productos:
          type: array
          items:
            type: object
            properties:
              id_producto:
                type: integer
                format: int64
                readOnly: true
                example: 5
              nombre:
                type: string
                example: "Hamburguesa con queso"
              img: 
                type: string
                example: "https://d1uz88p17r663j.cloudfront.net/original/8689e8d974203563ddcc9bbff91323c2_MG_CHORIZOBURGER_Main-880x660.png"
              precio:
                type: integer
                example: 95
              cantidad:
                type: integer
                example: 7
  parameters:
    lim:
      name: lim
      in: query
      description: "Cantidad de elementos retornados"
      schema:
        type: integer
        minimum: 10
        maximum: 20
        example: 15
    id_usuario:
      required: true
      name: id_usuario
      in: path
      description: id del usuario
      schema:
        type: integer
        example: 5
    id_producto:
      required: true
      name: id_producto
      in: path
      description: id del producto
      schema:
        type: integer
        example: 5
    id_pedido:
      required: true
      name: id_pedido
      in: path
      description: id del pedido
      schema:
        type: integer
        example: 9
        
        
  securitySchemes:
    autenticacion:            
      type: http
      scheme: bearer
      description: JWT para usuario registrado
      bearerFormat: JWT
    middelware_autorizacion:            
      type: http
      scheme: bearer
      description: JWT para usuario Administrador
      bearerFormat: JWT